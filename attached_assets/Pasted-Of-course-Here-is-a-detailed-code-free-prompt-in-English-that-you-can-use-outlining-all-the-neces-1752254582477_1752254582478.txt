Of course. Here is a detailed, code-free prompt in English that you can use, outlining all the necessary changes to make the "Payment Frequency" feature fully functional across your entire application.

Prompt for Replit:

Hello, I need a major feature implementation for my financial calculator application. Currently, I have a "Payment Frequency" dropdown that allows users to select "Monthly," "Quarterly," "Semi-Annual," or "Annual." While the selected value is saved, it does not actually affect any of the financial calculations; the app's logic defaults to assuming monthly payments, which is incorrect.

My goal is to make this "Payment Frequency" setting fully functional so that it correctly drives all calculations, reports, and data visualizations throughout the application.

Here is a detailed breakdown of the required changes:

1. Refactor the Core Calculation Logic (in the lib/finance.ts file):

Generalize the Payment Calculation: The function that currently calculates the monthlyPayment must be refactored to calculate a generic periodicPayment. Instead of always dividing the annual interest rate by 12, it must use the correct number of payment periods per year (12 for monthly, 4 for quarterly, 2 for semi-annual, and 1 for annual). The total number of payments in the loan term must also be adjusted accordingly.

Correct the Payment Schedule Generation: The function that generates the payment schedule needs to be updated. The date for each payment should no longer be calculated by simply adding one month. It must be calculated based on the selected frequency (e.g., for "Quarterly," each payment date should be 3 months after the previous one).

Create Helper Functions: To support the logic above, please create two new helper functions within this file:

A function to return the number of payment periods per year based on the selected frequency string.

A function to calculate the correct date for the next payment based on the start date, payment number, and frequency.

2. Update the Backend API Endpoint (in the routes.ts file):

The /api/calculate endpoint must be updated to pass the paymentFrequency parameter to the newly refactored calculation functions from Step 1.

In the JSON response sent back to the frontend, please rename the monthlyPayment field to periodicPayment to accurately reflect that the payment might not be monthly.

3. Update All Affected Frontend Components (UI):

The change in payment frequency will affect every tab that displays calculation results. All of the following components need to be reviewed and updated:

PaymentScheduleTab: The table in this tab must correctly display the periodic payment dates and amounts.

InvestorReturnsTab: While investor returns might still be analyzed on a monthly basis for graphing, ensure the underlying data is consistent with the new payment schedule.

SummaryTab: The summary card must be updated. The label "Monthly Payment" should be changed to "Periodic Payment" (or simply "Payment"), and it should display the new periodicPayment value from the API.

ProjectionsTab: All financial projections, especially those related to cash flow and debt servicing, must use the correct periodic payment amount and frequency.

BankerReportsTab: The previews and the final generated PDF reports in this tab must reflect the correct periodic payment and schedule.

ReportsTab: The functions that generate PDFs (generatePaymentReport, generateProjectSummaryReport, etc.) must be updated to accept the new periodicPayment and use it to display the correct information. The labels inside the PDFs should also be updated from "Monthly Payment" to "Periodic Payment."

The final outcome should be a fully interactive and accurate calculator where selecting a different payment frequency correctly recalculates and updates all displayed data, charts, and downloadable reports across the entire application.