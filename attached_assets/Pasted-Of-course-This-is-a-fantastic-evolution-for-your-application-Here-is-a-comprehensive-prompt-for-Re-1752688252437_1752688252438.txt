Of course. This is a fantastic evolution for your application. Here is a comprehensive prompt for Replit that captures all the requested enhancements, focusing on creating a highly interactive and professional financial analysis tool.

Prompt for the Replit AI Assistant
Role: You are an expert full-stack developer specializing in creating professional, interactive financial dashboards with React, TypeScript, and modern state management libraries.

Primary Goal: Significantly upgrade the application's user experience and analytical power. Your main task is to transform the Renter / Operator Results tab from a static placeholder into a fully interactive, real-time analysis dashboard, while improving the overall UI and ensuring all existing functionalities are preserved and seamlessly integrated.

Detailed Instructions:
1. General UI/UX and Input Refinement:

Enhance the Home View: Improve the overall aesthetics of the Input Parameters view. Refine spacing, typography, and component styling for a more polished, professional look.

Modify Input Parameters: In the Business Parameters input card, remove the "Monthly Revenue" input field. This parameter will now be controlled interactively in the results tab.

2. Architect the Renter / Operator Results Tab:

This tab is no longer a simple placeholder. It will become a self-contained dashboard.

Main Feature: Interactive Revenue Slider:

At the top of this tab, place a prominent Slider component to control the projected Monthly Revenue.

This slider is the centerpiece of interactivity for this section. All data and charts within the sub-tabs below it must update in real-time as the user adjusts the slider, without needing to press the main "Calculate" button again.

Default Value Logic: The slider's default value must be automatically calculated to be the break-even point, where Monthly Revenue - Total Monthly Expenses = 0. This shows the user the minimum required income to not lose money.

3. Build the Sub-Tabs within Renter / Operator Results:

A. "Summary" Sub-Tab:

This will be the default view. Display a clean, high-level overview of the investment's profitability.

Calculate and display the following key financial metrics in clear, well-designed cards or sections:

Initial Investment (The down payment).

Net Present Value (NPV): Calculate using a sample inflation/discount rate (e.g., 7.5%).

Internal Rate of Return (IRR): The primary metric for profitability.

Payback Period: How long it will take to recover the initial investment.

Total Available Income: The projected gross rental income over the loan term.

B. "Cash Flow" Sub-Tab:

Provide a clear, visual monthly breakdown.

Show a comparison between:

The fixed monthly loan payment.

The variable monthly revenue (controlled by the slider).

Clearly display the resulting Net Monthly Cash Flow (Revenue - Loan Payment - Operating Expenses). Use charts to visualize this over the loan's term.

C. "Income Statement (P&L)" Sub-Tab:

Present a complete, detailed Profit & Loss statement in a professional table format.

Include line items for Revenue, all Operating Expenses, Interest Payments (as a financial expense), Depreciation, Pre-Tax Profit, Taxes, and final Net Profit.

D. "Financial Metrics Explained" Sub-Tab:

This is an educational section. List the key financial metrics (NPV, IRR, Payback Period, etc.).

For each metric, provide a concise and clear explanation of what it is and why it's important for evaluating this type of investment.

4. Full Integration and Functionality Preservation:

State Management: The interactivity of the revenue slider is critical. Implement a robust state management solution (like Zustand, or leverage React Query's cache) to handle the real-time updates across all sub-tabs smoothly and without performance degradation. The result of the main calculation should be the baseline, which is then dynamically modified by the slider on the client side.

No Regression: It is absolutely essential that no existing functionality is lost. The entire Lender / Investor Results section, with all its sub-tabs (Schedule, Investors, Summary, etc.), must remain fully functional and accurate. The main "Calculate" button still drives the initial, complete calculation for both perspectives.

Database & API Integration: Ensure that the data structures and API endpoints can support this enhanced functionality. The initial calculation should fetch and store all necessary base data, while the interactive elements work on the client-side state derived from that data.